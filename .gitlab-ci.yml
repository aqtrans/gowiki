image: aqtrans/golang-npm:latest

cache:
  key: "$CI_BUILD_REF_NAME"
  paths:
    - vendor/

before_script:
  - ln -s /builds /go/src/jba.io
  - cd /go/src/jba.io/go/wiki
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'

stages:
  - install-environment
  - build
  - test
  - deploy  

install-go:
  stage: install-environment
  script:
    - go version
    - echo $PATH
    - echo $GOPATH
    - go env
    - which go

build-my-project:
  stage: build
  script:
    #- curl -sL https://deb.nodesource.com/setup_6.x | bash -
    #- apt-get update -y && apt-get install -y nodejs
    #- npm install -g bower gulp    
    - /bin/sh ./build_css.sh
    - go get -u github.com/kardianos/govendor
    - govendor sync
    - go get -d
    - go build -o ./wiki
  cache:
    paths:
      - bower_components/
  artifacts:
    paths:
      - wiki
      - assets/css/wiki.css
      - assets/css/wiki.css.map
      - vendor/

test-my-project:
  stage: test
  coverage: '/coverage: \d+\.\d+/'
  script:
    - go get -d  
    - go test -v
    - go test -race
    - go test -cover
    - rm -rf tests/gowiki-testdata

deploy_staging:
  stage: deploy
  variables:
    DEPLOY_HOST: 'golang@192.168.1.100'
  script:
    - echo $DEPLOY_HOST
    - echo $CI_PROJECT_NAME
    - apt-get update -y && apt-get install -y rsync
    # rsync to fresh folder
    - rsync -av --exclude data/ --exclude vendor/ --exclude http.log ./ $DEPLOY_HOST:$CI_PROJECT_NAME.new
    # Stop app, to release DB locks 
    - ssh $DEPLOY_HOST sudo systemctl stop golang@$CI_PROJECT_NAME    
    # Copy data/ from current to new
    - ssh $DEPLOY_HOST /bin/bash -c "'if test -d $CI_PROJECT_NAME; then cp -rpv $CI_PROJECT_NAME/data $CI_PROJECT_NAME.new/; fi'"
    # Flip flop instances; current -> old, new -> current
    - ssh $DEPLOY_HOST "mv -fTv $CI_PROJECT_NAME $CI_PROJECT_NAME.old && mv -v $CI_PROJECT_NAME.new $CI_PROJECT_NAME" 
    # Restart app
    - ssh $DEPLOY_HOST sudo systemctl start golang@$CI_PROJECT_NAME
  environment:
    name: staging
    url: http://wiki.leela.es.gy
  when: manual

deploy_prod:
  stage: deploy
  variables:
    DEPLOY_HOST: 'golang@frink.es.gy'
  script:
    - echo $DEPLOY_HOST
    - echo $CI_PROJECT_NAME
    - apt-get update -y && apt-get install -y rsync
    # Remove previous backup of app
    - ssh $DEPLOY_HOST /bin/bash -c "'if test -d $CI_PROJECT_NAME.old; then rm -rfv $CI_PROJECT_NAME.old; fi'"
    # Stop app, to release DB locks 
    - ssh $DEPLOY_HOST sudo systemctl stop golang@$CI_PROJECT_NAME
    # Backup old app
    - ssh $DEPLOY_HOST /bin/bash -c "'if test -d $CI_PROJECT_NAME; then mv -v $CI_PROJECT_NAME{,.old}; fi'"
    # rsync to fresh folder
    - rsync -av --exclude data/ --exclude vendor/ --exclude http.log ./ $DEPLOY_HOST:$CI_PROJECT_NAME
    # Copy data/ from old to new
    - ssh $DEPLOY_HOST /bin/bash -c "'if test -d $CI_PROJECT_NAME.old; then cp -rp $CI_PROJECT_NAME.old/data $CI_PROJECT_NAME/; fi'"
    # Restart app
    - ssh $DEPLOY_HOST sudo systemctl start golang@$CI_PROJECT_NAME
    #- /bin/sh ./deploy.sh golang@frink.es.gy golang@$CI_PROJECT_NAME $CI_PROJECT_NAME
    # Backup old app
    #- ssh golang@frink.es.gy mv /home/golang/wiki/ /home/golang/wiki.old/
    # rsync to fresh folder
    #- rsync -av --delete --exclude data/ --exclude vendor/ --exclude http.log ./ golang@frink.es.gy:/home/golang/wiki/
    # Copy data/ from old to new
    #- ssh golang@frink.es.gy cp -rp /home/golang/wiki.old/data /home/golang/wiki/
    # Restart 
    #- ssh golang@frink.es.gy sudo systemctl restart golang@wiki
  environment:
    name: production
    url: https://wiki.jba.io
  only:
    - master
