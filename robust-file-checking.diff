diff --git a/CommonMark.Editor b/CommonMark.Editor
--- a/CommonMark.Editor
+++ b/CommonMark.Editor
@@ -1 +1 @@
-Subproject commit 33eb58cfaa5a11fa0ca42c6661dc3cd6dd25f388
+Subproject commit 33eb58cfaa5a11fa0ca42c6661dc3cd6dd25f388-dirty
diff --git a/main.go b/main.go
index 01f3599..e84def8 100644
--- a/main.go
+++ b/main.go
@@ -381,24 +381,60 @@ func loadPage(r *http.Request) (*WikiPage, error) {
 	var pagetitle string
 	vars := mux.Vars(r)
 	filename := vars["name"]
-    fullfilename := "./md/" + filename + ".md"
-    body, err := ioutil.ReadFile(fullfilename)
-    if err != nil {
-		//This should mean file is non-existent, so create new page
-		// FIXME: Add unixtime to newly created frontmatter
+	fullpath := "./md/" + filename
+	var body []byte
+	// Check if this is a directory
+	fullpathinfo, err := os.Stat(fullpath);
+	if fullpathinfo.IsDir() {
+		log.Println("This should be a directory. Displaying index")
+		dirindex := fullpath + "/index"
+		body, err = ioutil.ReadFile(dirindex)
+		//If dir index doesn't exist, create it
+		if _, err := os.Stat(dirindex); os.IsNotExist(err) {
+				//This should mean file is non-existent, so create new page
+				// FIXME: Add unixtime to newly created frontmatter
+				log.Println(err)
+				errn := errors.New("No such file")
+				newwp := &WikiPage{
+					filename,
+					filename,
+					&Frontmatter{
+						Title: filename,
+					},			
+					&Wiki{},
+					false,
+				}		
+		    	return newwp, errn
+		}
+	// No error should mean its a regular file
+	//} else if fullpathinfo.Mode().IsRegular() {
+	} else if err == nil {
+	// Check for no file extension files 
+		body, err = ioutil.ReadFile(fullpath)
+	} else if os.IsNotExist(err) {
+	// Check for old .md file extensions	
+		fullfilename := fullpath + ".md" 
+		if _, err := os.Stat(fullfilename); err == nil {
+			body, err = ioutil.ReadFile(fullfilename)
+		} else {
+			//This should mean file is non-existent, so create new page
+			// FIXME: Add unixtime to newly created frontmatter
+			log.Println(err)
+			errn := errors.New("No such file")
+			newwp := &WikiPage{
+				filename,
+				filename,
+				&Frontmatter{
+					Title: filename,
+				},			
+				&Wiki{},
+				false,
+			}		
+	    	return newwp, errn
+        }
+	} else {
 		log.Println(err)
-		errn := errors.New("No such file")
-		newwp := &WikiPage{
-			filename,
-			filename,
-			&Frontmatter{
-				Title: filename,
-			},			
-			&Wiki{},
-			false,
-		}		
-    	return newwp, errn
-    }
+	}
 	// Read YAML frontmatter into fm
 	content, err := readFront(body, &fm)
 	if err != nil {
@@ -612,7 +648,7 @@ func viewHandler(w http.ResponseWriter, r *http.Request) {
 	p, err := loadPage(r)
 	if err != nil {
 		log.Println(err)
-		http.NotFound(w, r)
+		//http.NotFound(w, r)
 		return
 	}	
 	err = renderTemplate(w, "md.tmpl", p)
@@ -873,7 +909,7 @@ func main() {
 	r.HandleFunc("/edit/{name}", editHandler)
 	//r.HandleFunc("/{name}", viewHandler).Methods("GET")
 	r.PathPrefix("/").Handler(http.FileServer(http.Dir("./public/")))
-        r.HandleFunc("/{name}", viewHandler).Methods("GET")
+    r.HandleFunc("/{name}", viewHandler).Methods("GET")
 	http.Handle("/", std.Then(r))
 	http.ListenAndServe(":3000", nil)
 }
